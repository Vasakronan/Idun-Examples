import {Component, Input, OnInit} from '@angular/core';
import {Observation} from '../../common/rectypes';
import {ProptechosService} from '../../services/proptechos.service';
import * as Highcharts from 'highcharts';
import {Options} from 'highcharts';
import * as _ from 'lodash';

@Component({
  selector: 'app-latest-observation',
  templateUrl: './latest-observation.component.html',
  styleUrls: ['./latest-observation.component.scss']
})
export class LatestObservationComponent implements OnInit {

  @Input() sensorId: string;
  observation: Observation;

  highcharts = Highcharts;
  updateFlag = false;
  chartOptions: Options = this.buildChartOptions();

  private temporaryList: Array<IObservation> = new Array<IObservation>();

  constructor(private apiService: ProptechosService) { }

  ngOnInit(): void {
    const test = [
      {
        time: new Date('2020-03-10T01:00:00Z').getTime(),
        value: 3.35374
      },
      {
        time: new Date('2020-03-10T10:00:00Z').getTime(),
        value: 4.60519
      },
      {
        time: new Date('2020-03-10T11:00:00Z').getTime(),
        value: 5.33243
      },
      {
        time: new Date('2020-03-10T03:00:00Z').getTime(),
        value: 2.97116
      },
      {
        time: new Date('2020-03-10T16:00:00Z').getTime(),
        value: 4.5409
      },
      {
        time: new Date('2020-03-10T08:00:00Z').getTime(),
        value: 0.63243
      },
      {
        time: new Date('2020-05-01T16:00:00Z').getTime(),
        value: 3.51839
      },
      {
        time: new Date('2020-05-01T21:00:00Z').getTime(),
        value: 2.97979
      },
      {
        time: new Date('2020-05-01T04:00:00Z').getTime(),
        value: 2.76117
      },
      {
        time: new Date('2020-05-01T20:00:00Z').getTime(),
        value: 3.33163
      },
      {
        time: new Date('2020-08-14T22:00:00Z').getTime(),
        value: 0.51332
      },
      {
        time: new Date('2020-08-14T09:00:00Z').getTime(),
        value: 0.38501
      },
      {
        time: new Date('2020-08-14T06:00:00Z').getTime(),
        value: 0.28641
      },
      {
        time: new Date('2020-08-14T02:00:00Z').getTime(),
        value: 0.38714
      },
      {
        time: new Date('2020-08-14T05:00:00Z').getTime(),
        value: 0.36889
      },
      {
        time: new Date('2020-03-15T00:00:00Z').getTime(),
        value: 5.72393
      },
      {
        time: new Date('2020-03-15T13:00:00Z').getTime(),
        value: 4.59742
      },
      {
        time: new Date('2020-03-15T06:00:00Z').getTime(),
        value: 2.92853
      },
      {
        time: new Date('2020-03-15T02:00:00Z').getTime(),
        value: 3.5336
      }
    ];
    const self = this;
    const sortOb = (a: IObservation, b: IObservation) => {
      if (a.time < b.time) {
        return -1;
      }
      if (a.time > b.time) {
        return 1;
      }
      return 0;
    };

    // let i = 0;
    // const intervalId = setInterval(() => {
    //   console.log('Iteration: ' + i);
    //   const t = test[i];
    //   self.temporaryList.push(t);
    //   const result = self.temporaryList.sort(sortOb).map((o) => {
    //     return [o.time, o.value];
    //   });
    //   self.chartOptions.series = [{
    //     name: 'Observation values',
    //     type: undefined,
    //     data: result
    //   }];
    //   self.updateFlag = true;
    //   i++;
    //   if (i === test.length) { clearInterval(intervalId); }
    // }, 5000);
  }

  getObservation(): void {
    const self = this;
    this.apiService.getLatestObservation(this.sensorId).subscribe((data) => {
      this.observation = data;
      const obs = {
        time: new Date(data.observationTime).getTime(),
        value: data.value
      };
      if (!_.find(this.temporaryList, obs)) {
        this.temporaryList.push(obs);
      }
      const result = this.temporaryList
        .sort(self.sortObservation)
        .map((o) => {
        return [o.time, o.value];
      });
      self.chartOptions.series = [{
        name: 'Observation values',
        type: undefined,
        data: result
      }];
      self.updateFlag = true;
    });
  }

  private buildChartOptions(): Options {
    return {
      chart: {
        type: 'spline'
      },
      title: {
        text: 'Latest observation values'
      },
      xAxis: {
        type: 'datetime',
        dateTimeLabelFormats: {
          month: '%e. %b',
          year: '%b'
        },
        title: {
          text: 'Date'
        }
      },
      yAxis: {
        title: {
          text: 'Observation value'
        }
      },
      tooltip: {
        headerFormat: '<b>{series.name}</b><br>',
        pointFormat: '{point.x:%e. %b}: {point.y:.2f}'
      },
      series: [{
        color: '#3f51b5',
        name: 'Observation values',
        type: undefined,
        data: []
      }]
    };
  }

  private sortObservation = (a: IObservation, b: IObservation) => {
    if (a.time < b.time) {
      return -1;
    }
    if (a.time > b.time) {
      return 1;
    }
    return 0;
  };
}

interface IObservation {
  time: number;
  value: any;
}
